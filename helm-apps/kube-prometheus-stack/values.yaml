## Default prometheus-operator values for all environments

crds:
  enabled: false

## General
nameOverride: "mycompany"

defaultRules:
  rules:
    etcd: false
    kubeScheduler: false

## Alertmanager
alertmanager:
  enabled: true
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      #--- Annotations to use nginx-ingress
      kubernetes.io/ingress.class: "nginx"
      nginx.ingress.kubernetes.io/rewrite-target: / # URL redirection
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true" # Force redirect to HTTPS
      nginx.ingress.kubernetes.io/ssl-redirect: "true" # SSL redirection enabled
      #--- Optional Annotation for cert-manager
      cert-manager.io/cluster-issuer: "letsencrypt-prod-http01" # Using Let's Encrypt for the certificate
    hosts:
      - alertmanager.mycompany.com
    ## Paths to use for ingress rules - one path should match the alertmanagerSpec.routePrefix
    ##
    paths:
      - /
    ## For Kubernetes >= 1.18 you should specify the pathType (determines how Ingress paths should be matched)
    ## See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#better-path-matching-with-path-types
    pathType: Prefix
    ## TLS configuration for Alertmanager Ingress
    ## Secret must be manually created in the namespace
    ##
    tls:
      - secretName: alermanager-tls-secret
        hosts:
          - alermanager.mycompany.com

## Grafana
grafana:
  enabled: true

  additionalDataSources:
  - name: VictoriaMetrics
    type: prometheus
    access: direct
    editable: true
    jsonData:
      tlsSkipVerify: true
    orgId: 1
    url: http://victoria-metrics-victoria-metrics-cluster-vmselect.monitoring.svc.cluster.local:8481/select/0/prometheus/
    version: 1

  ingress:
    ## If true, Grafana Ingress will be created
    ##
    enabled: true

    ## IngressClassName for Grafana Ingress.
    ## Should be provided if Ingress is enable.
    ##
    # ingressClassName: nginx

    ## Annotations for Grafana Ingress
    ##
    annotations:
      #--- Annotations to use nginx-ingress
      kubernetes.io/ingress.class: "nginx"
      nginx.ingress.kubernetes.io/rewrite-target: / # URL redirection
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true" # Force redirect to HTTPS
      nginx.ingress.kubernetes.io/ssl-redirect: "true" # SSL redirection enabled
      #--- Optional Annotation for cert-manager
      cert-manager.io/cluster-issuer: "letsencrypt-prod-http01" # Using Let's Encrypt for the certificate

    ## Labels to be added to the Ingress
    ##
    labels: {}

    ## Hostnames.
    ## Must be provided if Ingress is enable.
    ##
    # hosts:
    #   - grafana.domain.com
    hosts:
      - grafana.mycompany.com

    ## Path for grafana ingress
    path: /

    ## TLS configuration for grafana Ingress
    ## Secret must be manually created in the namespace
    ##
    tls:
      - secretName: grafana-tls-secret
        hosts:
          - grafana.mycompany.com


## Exporters
kubernetesServiceMonitors:
  enabled: true

kubeApiServer:
  enabled: false

kubelet:
  enabled: true

kubeControllerManager:
  enabled: false

coreDns:
  enabled: false

kubeDns:
  enabled: false

kubeEtcd:
  enabled: false

kubeScheduler:
  enabled: false

kubeProxy:
  enabled: false

kubeStateMetrics:
  enabled: false


## Prometheus operator
prometheusOperator:
  admissionWebhooks:
    enabled: true
  kubeletService:
    enabled: true
  resources:
    limits:
      cpu: 200m
      memory: 400Mi
    requests:
      cpu: 100m
      memory: 200Mi


## Prometheus
prometheus:
  enabled: true
  ingress:
    enabled: true

    # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
    # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
    # ingressClassName: nginx

    annotations:
      #--- Annotations to use nginx-ingress
      kubernetes.io/ingress.class: "nginx"
      nginx.ingress.kubernetes.io/rewrite-target: / # URL redirection
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true" # Force redirect to HTTPS
      nginx.ingress.kubernetes.io/ssl-redirect: "true" # SSL redirection enabled
      #--- Optional Annotation for cert-manager
      cert-manager.io/cluster-issuer: "letsencrypt-prod-http01" # Using Let's Encrypt for the certificate
    labels: {}

    ## Redirect ingress to an additional defined port on the service
    # servicePort: 8081

    ## Hostnames.
    ## Must be provided if Ingress is enabled.
    ##
    # hosts:
    #   - prometheus.domain.com
    hosts:
      - prometheus.mycompany.com

    ## Paths to use for ingress rules - one path should match the prometheusSpec.routePrefix
    ##
    paths:
      - /

    ## For Kubernetes >= 1.18 you should specify the pathType (determines how Ingress paths should be matched)
    ## See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#better-path-matching-with-path-types
    # pathType: ImplementationSpecific

    ## TLS configuration for Prometheus Ingress
    ## Secret must be manually created in the namespace
    ##
    tls:
      - secretName: prometheus-tls-secret
        hosts:
          - prometheus.mycompany.com

  prometheusSpec:
    remoteWrite:
    - url: "http://victoria-metrics-victoria-metrics-cluster-vminsert.monitoring.svc.cluster.local:8480/insert/0/prometheus/"
      # Reference: 
      # https://www.alibabacloud.com/help/doc-detail/114516.htm
      # https://prometheus.io/docs/practices/remote_write/
      # https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#remotewritespec
      # https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#queueconfig
      remoteTimeout: "60s"
      queueConfig:
        # Number of samples to buffer per shard before we start dropping them.
        capacity: 20000
        # Maximum number of shards, i.e. amount of concurrency.
        maxShards: 30
        # Minimum number of shards.
        minShards: 5
        # Maximum number of samples per send.
        maxSamplesPerSend: 10000
        # Minimum amount of time to wait before retrying a failed request
        minBackoff: "10s"
        # Maximum amount of time to wait before retrying a failed request
        maxBackoff: "40s"
      tlsConfig:
        insecureSkipVerify: true
    image:
      registry: quay.io
      repository: prometheus/prometheus
      tag: v3.3.1
    resources:
      limits:
        cpu: 1024m
        memory: 2Gi
      requests:
        cpu: 250m
        memory: 500Mi
    externalLabels:
      cluster: kind-kind-multinodes
    replicas: 1
    scrapeInterval: 60s
    replicaExternalLabelName: "replica"
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
  additionalServiceMonitors:
    - name: "kube-pires"
      jobLabel: "app_kubernetes_io_name"
      selector:
        matchLabels:
          app.kubernetes.io/name: kube-pires
      namespaceSelector:
        any: true
      endpoints:
        - port: "http"
          path: /metrics

thanosRuler:
  enabled: false
